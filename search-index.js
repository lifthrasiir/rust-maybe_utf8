var searchIndex = {};
searchIndex['maybe_utf8'] = {"items":[[0,"","maybe_utf8","# MaybeUtf8 0.2.3"],[3,"MaybeUtf8Buf","","Byte container optionally encoded as UTF-8. It might be either..."],[3,"MaybeUtf8Slice","","Byte slice optionally encoded as UTF-8. A borrowed version of `MaybeUtf8Buf`."],[8,"IntoMaybeUtf8","","A helper trait for uniformly creating `MaybeUtf8Buf` or `MaybeUtf8Slice` values."],[10,"into_maybe_utf8","","Converts given value into either `MaybeUtf8Buf` or `MaybeUtf8Slice`.",0],[11,"clone","","",1],[11,"new","","Creates a new empty `MaybeUtf8Buf` value (which is, naturally, encoded in UTF-8).",1],[11,"from_str","","Creates a `MaybeUtf8Buf` value from an owned `String`.",1],[11,"from_bytes","","Creates a `MaybeUtf8Buf` value from an owned `Vec` of `u8` bytes.",1],[11,"as_bytes","","Returns a slice of underlying bytes. It might or might not be encoded in UTF-8.",1],[11,"as_str","","Returns a string slice encoded in UTF-8 if possible.\nIt returns `None` if the underlying bytes are not encoded in UTF-8.",1],[11,"map_as_cow","","Returns a `Cow` string which represents the current `MaybeUtf8Slice`.\nIt may call given `to_cow` function to get a `Cow` string out of the bytes.\n`to_cow` function itself may return a `String` or `&str` compatible to `Cow` string.",1],[11,"as_cow_lossy","","Returns a `Cow` string which represents the current `MaybeUtf8Slice`.\nAny invalid UTF-8 sequences are replaced by U+FFFD, as like `String::from_utf8_lossy`.",1],[11,"to_slice","","Returns a `MaybeUtf8Slice` borrowed from this `MaybeUtf8Buf`.",1],[11,"into_str","","Tries to convert a `MaybeUtf8Buf` into a `String`.\nIf there is an invalid UTF-8 sequence it returns the original `MaybeUtf8Buf` back.",1],[11,"map_into_str","","Converts a `MaybeUtf8Buf` into a `String`.\nIt may call given `into_str` function to get a `String` out of the bytes.",1],[11,"into_str_lossy","","Converts a `MaybeUtf8Buf` into a `String`.\nAny invalid UTF-8 sequences are replaced by U+FFFD, as like `String::from_utf8_lossy`.",1],[11,"into_bytes","","Converts a `MaybeUtf8Buf` into a `Vec` of `u8` bytes.",1],[11,"len","","Returns a byte length of the `MaybeUtf8Buf` value.",1],[11,"new","","Creates a new empty `MaybeUtf8Slice` value (which is, naturally, encoded in UTF-8).",2],[11,"from_str","","Creates a `MaybeUtf8Slice` reference from a string slice.",2],[11,"from_bytes","","Creates a `MaybeUtf8Slice` reference from a `u8` slice.",2],[11,"as_bytes","","Returns a slice of underlying bytes. It might or might not be encoded in UTF-8.",2],[11,"as_str","","Returns a string slice encoded in UTF-8 if possible.\nIt returns `None` if the underlying bytes are not encoded in UTF-8.",2],[11,"map_as_cow","","Returns a `Cow` string which represents the current `MaybeUtf8Slice`.\nIt may call given `to_cow` function to get a `Cow` string out of the bytes.\n`to_cow` function itself may return a `String` or `&str` compatible to `Cow` string.",2],[11,"as_cow_lossy","","Returns a `Cow` string which represents the current `MaybeUtf8Slice`.\nAny invalid UTF-8 sequences are replaced by U+FFFD, as like `String::from_utf8_lossy`.",2],[11,"to_owned","","Returns a new `MaybeUtf8Buf` from the current `MaybeUtf8Slice`.",2],[11,"len","","Returns a byte length of the `MaybeUtf8Slice` value.",2],[11,"eq","","",1],[11,"partial_cmp","","",1],[11,"eq","","",1],[11,"partial_cmp","","",1],[11,"eq","","",1],[11,"partial_cmp","","",1],[11,"eq","","",1],[11,"partial_cmp","","",1],[11,"eq","","",2],[11,"partial_cmp","","",2],[11,"eq","","",2],[11,"partial_cmp","","",2],[11,"eq","","",2],[11,"partial_cmp","","",2],[11,"eq","","",2],[11,"partial_cmp","","",2],[11,"cmp","","",1],[11,"cmp","","",2],[11,"from_iter","","",1],[11,"from_iter","","",1],[11,"default","","",1],[11,"default","","",2],[11,"fmt","","",1],[11,"fmt","","",1],[11,"fmt","","",2],[11,"fmt","","",2],[11,"into_maybe_utf8","collections::string","",3],[11,"into_maybe_utf8","collections::vec","",4]],"paths":[[8,"IntoMaybeUtf8"],[3,"MaybeUtf8Buf"],[3,"MaybeUtf8Slice"],[3,"String"],[3,"Vec"]]};
initSearch(searchIndex);
